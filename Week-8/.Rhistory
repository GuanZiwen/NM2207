knitr::opts_chunk$set(echo = TRUE)
# Install package
install.packages("shiny")
# Invoke the package
library(shiny)
# Run an example from the library
runExample("01_hello")
# Install package
install.packages("shiny")
# Invoke the package
library(shiny)
install.packages("shiny")
# Install package
install.packages("shiny")
# Invoke the package
library(shiny)
knitr::opts_chunk$set(echo = TRUE)
# Install package
install.packages("shiny")
# Invoke the package
library(shiny)
# Run an example from the library
runExample("01_hello")
runApp("newdir")
# Run an example from the library
runExample("01_hello")
#Example app: user interface
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label ="Number of bins:",
min =1,
max =50,
value =30)),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot"))))
#Example app: user interface
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label ="Number of bins:",
min =1,
max =50,
value =30)),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot"))))
runExample("01_hello")
#Example app: user interface
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny! TEST 123"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label ="Number of bins:",
min =1,
max =50,
value =30)),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot"))))
runExample("01_hello")
#Example app: user interface
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label ="Number of bins:",
min =1,
max =50,
value =30)),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot"))))
runExample("01_hello")
install.packages("shiny")
library(shiny)
install.packages("shiny")
runExample("01_hello")
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
runApp("App-1")
#
library(shiny)
runApp("App-1")
runApp('App-1')
library(shiny)
runApp("App-1",display.mode = "showcase")
library(shiny)
runApp("App-1",display.mode = "showcase")
library(shiny)
runApp("App-1",display.mode = "showcase")
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
# Run the app ----
shinyApp(ui = ui, server = server)
setwd("D:/NM2207/Week-9")
shiny::runApp('App-1')
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
runExample("05_sliders")
runApp('App-5/app.sliders.R')
library(shiny)
runExample("05_sliders")
runApp('App-5/app.sliders.R')
runApp('App-5/app.sliders.R')
library(shiny)
runApp("App-5")
library(shiny)
runApp("App-5")
knitr::include_graphics("C:/Users/Zzz/Pictures/BnS/Screenshot_160131_001.jpg")
knitr::include_graphics("Screenshot 2023-10-18 194425.png")
library(shiny)
runApp("App-5")
library(shiny)
#runApp("App-5")
knitr::include_graphics("screenshot.png")
library(shiny)
#runApp("App-5")
knitr::include_graphics("screenshot.png")
setwd("D:/NM2207/Final Project")
